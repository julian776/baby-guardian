// Code generated by mockery v2.43.2. DO NOT EDIT.

package sensors

import (
	context "context"

	proto "github.com/julian776/baby-guardian/protos"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockSensor is an autogenerated mock type for the Sensor type
type MockSensor struct {
	mock.Mock
}

type MockSensor_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSensor) EXPECT() *MockSensor_Expecter {
	return &MockSensor_Expecter{mock: &_m.Mock}
}

// Interval provides a mock function with given fields:
func (_m *MockSensor) Interval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Interval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockSensor_Interval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Interval'
type MockSensor_Interval_Call struct {
	*mock.Call
}

// Interval is a helper method to define mock.On call
func (_e *MockSensor_Expecter) Interval() *MockSensor_Interval_Call {
	return &MockSensor_Interval_Call{Call: _e.mock.On("Interval")}
}

func (_c *MockSensor_Interval_Call) Run(run func()) *MockSensor_Interval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSensor_Interval_Call) Return(_a0 time.Duration) *MockSensor_Interval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensor_Interval_Call) RunAndReturn(run func() time.Duration) *MockSensor_Interval_Call {
	_c.Call.Return(run)
	return _c
}

// Name provides a mock function with given fields:
func (_m *MockSensor) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockSensor_Name_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Name'
type MockSensor_Name_Call struct {
	*mock.Call
}

// Name is a helper method to define mock.On call
func (_e *MockSensor_Expecter) Name() *MockSensor_Name_Call {
	return &MockSensor_Name_Call{Call: _e.mock.On("Name")}
}

func (_c *MockSensor_Name_Call) Run(run func()) *MockSensor_Name_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockSensor_Name_Call) Return(_a0 string) *MockSensor_Name_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensor_Name_Call) RunAndReturn(run func() string) *MockSensor_Name_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: _a0
func (_m *MockSensor) Start(_a0 context.Context) (<-chan *proto.Signal, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 <-chan *proto.Signal
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (<-chan *proto.Signal, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) <-chan *proto.Signal); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *proto.Signal)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockSensor_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockSensor_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSensor_Expecter) Start(_a0 interface{}) *MockSensor_Start_Call {
	return &MockSensor_Start_Call{Call: _e.mock.On("Start", _a0)}
}

func (_c *MockSensor_Start_Call) Run(run func(_a0 context.Context)) *MockSensor_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSensor_Start_Call) Return(_a0 <-chan *proto.Signal, _a1 error) *MockSensor_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockSensor_Start_Call) RunAndReturn(run func(context.Context) (<-chan *proto.Signal, error)) *MockSensor_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields: _a0
func (_m *MockSensor) Stop(_a0 context.Context) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSensor_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockSensor_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockSensor_Expecter) Stop(_a0 interface{}) *MockSensor_Stop_Call {
	return &MockSensor_Stop_Call{Call: _e.mock.On("Stop", _a0)}
}

func (_c *MockSensor_Stop_Call) Run(run func(_a0 context.Context)) *MockSensor_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockSensor_Stop_Call) Return(_a0 error) *MockSensor_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSensor_Stop_Call) RunAndReturn(run func(context.Context) error) *MockSensor_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSensor creates a new instance of MockSensor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSensor(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSensor {
	mock := &MockSensor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
