package iaws

import (
	"bufio"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"

	"github.com/aws/aws-sdk-go-v2/aws"
)

var (
	errInvalidCredentialsFile = errors.New("invalid credentials file. If you are using the default credentials file, make sure it is in the correct format generated by the AWS CLI. If you are using a custom credentials file, make sure it is in the correct JSON format")
)

type creds struct {
	AccessKey string `json:"accessKey,omitempty"`
	SecretKey string `json:"secretKey,omitempty"`
}

// GetCredentials returns a new aws.CredentialsProvider
// that reads AWS credentials from a file.
// If filePath is empty, it reads the default credentials file.
// The default credentials file located at `~/.aws/credentials`
// generated by the AWS CLI.
// If a custom credentials file is used, it must be in the
// following JSON format:
//
//	{
//	  "accessKey": "yourKey",
//	  "secretKey": "yourSecret",
//	}
func GetCredentials(filePath string) aws.CredentialsProvider {
	return aws.NewCredentialsCache(aws.CredentialsProviderFunc(getCredentials(filePath)))
}

func getCredentials(filePath string) func(context.Context) (aws.Credentials, error) {
	return func(ctx context.Context) (aws.Credentials, error) {
		if filePath == "" {
			homedir, err := os.UserHomeDir()
			if err != nil {
				return aws.Credentials{}, fmt.Errorf("invalid credentials file: %w", err)
			}

			return readDefaultCredentials(ctx, filepath.Join(homedir, ".aws", "credentials"))
		}

		file, err := os.Open(filepath.Clean(filePath))
		if err != nil {
			return aws.Credentials{}, err
		}
		defer file.Close()

		decoder := json.NewDecoder(file)

		var creds creds
		if err := decoder.Decode(&creds); err != nil {
			return aws.Credentials{}, errInvalidCredentialsFile
		}

		fmt.Printf("creds: %+v\n", creds)

		return aws.Credentials{
			AccessKeyID:     creds.AccessKey,
			SecretAccessKey: creds.SecretKey,
		}, nil
	}
}

// readDefaultCredentials reads AWS credentials from the default
// credentials file generated by the AWS CLI.
func readDefaultCredentials(ctx context.Context, path string) (aws.Credentials, error) {
	file, err := os.Open(filepath.Clean(path))
	if err != nil {
		return aws.Credentials{}, err
	}
	defer file.Close()

	accessKey := ""
	secretKey := ""

	// Read credentials from file
	r := bufio.NewReader(file)
	maxLines := 100
	for i := 0; i < maxLines; i++ {
		select {
		case <-ctx.Done():
			return aws.Credentials{}, ctx.Err()
		default:
		}

		bytes, err := r.ReadBytes('\n')
		if err != nil {
			if err != io.EOF {
				return aws.Credentials{}, err
			}

			// Check if there are any bytes left
			if len(bytes) == 0 {
				break
			}
		}

		// Parse credentials
		s := strings.Split(string(bytes), "=")
		if len(s) != 2 {
			continue
		}

		key := s[0]
		switch {
		case strings.Contains(key, "aws_access_key_id"):
			accessKey = strings.TrimSpace(s[1])
		case strings.Contains(key, "aws_secret_access_key"):
			secretKey = strings.TrimSpace(s[1])
		default:
		}

		if accessKey != "" && secretKey != "" {
			return aws.Credentials{
				AccessKeyID:     accessKey,
				SecretAccessKey: secretKey,
			}, nil
		}
	}

	return aws.Credentials{}, errInvalidCredentialsFile
}
