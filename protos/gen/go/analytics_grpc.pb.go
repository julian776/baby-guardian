// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.23.4
// source: analytics.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Analytics_LastDangerousSignal_FullMethodName       = "/analytics.Analytics/LastDangerousSignal"
	Analytics_LastDangerousSignalStream_FullMethodName = "/analytics.Analytics/LastDangerousSignalStream"
)

// AnalyticsClient is the client API for Analytics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AnalyticsClient interface {
	LastDangerousSignal(ctx context.Context, in *LastDangerousSignalRequest, opts ...grpc.CallOption) (*LastDangerousSignalResponse, error)
	LastDangerousSignalStream(ctx context.Context, in *LastDangerousSignalStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LastDangerousSignalResponse], error)
}

type analyticsClient struct {
	cc grpc.ClientConnInterface
}

func NewAnalyticsClient(cc grpc.ClientConnInterface) AnalyticsClient {
	return &analyticsClient{cc}
}

func (c *analyticsClient) LastDangerousSignal(ctx context.Context, in *LastDangerousSignalRequest, opts ...grpc.CallOption) (*LastDangerousSignalResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LastDangerousSignalResponse)
	err := c.cc.Invoke(ctx, Analytics_LastDangerousSignal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *analyticsClient) LastDangerousSignalStream(ctx context.Context, in *LastDangerousSignalStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[LastDangerousSignalResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Analytics_ServiceDesc.Streams[0], Analytics_LastDangerousSignalStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[LastDangerousSignalStreamRequest, LastDangerousSignalResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Analytics_LastDangerousSignalStreamClient = grpc.ServerStreamingClient[LastDangerousSignalResponse]

// AnalyticsServer is the server API for Analytics service.
// All implementations must embed UnimplementedAnalyticsServer
// for forward compatibility.
type AnalyticsServer interface {
	LastDangerousSignal(context.Context, *LastDangerousSignalRequest) (*LastDangerousSignalResponse, error)
	LastDangerousSignalStream(*LastDangerousSignalStreamRequest, grpc.ServerStreamingServer[LastDangerousSignalResponse]) error
	mustEmbedUnimplementedAnalyticsServer()
}

// UnimplementedAnalyticsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAnalyticsServer struct{}

func (UnimplementedAnalyticsServer) LastDangerousSignal(context.Context, *LastDangerousSignalRequest) (*LastDangerousSignalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastDangerousSignal not implemented")
}
func (UnimplementedAnalyticsServer) LastDangerousSignalStream(*LastDangerousSignalStreamRequest, grpc.ServerStreamingServer[LastDangerousSignalResponse]) error {
	return status.Errorf(codes.Unimplemented, "method LastDangerousSignalStream not implemented")
}
func (UnimplementedAnalyticsServer) mustEmbedUnimplementedAnalyticsServer() {}
func (UnimplementedAnalyticsServer) testEmbeddedByValue()                   {}

// UnsafeAnalyticsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AnalyticsServer will
// result in compilation errors.
type UnsafeAnalyticsServer interface {
	mustEmbedUnimplementedAnalyticsServer()
}

func RegisterAnalyticsServer(s grpc.ServiceRegistrar, srv AnalyticsServer) {
	// If the following call pancis, it indicates UnimplementedAnalyticsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Analytics_ServiceDesc, srv)
}

func _Analytics_LastDangerousSignal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LastDangerousSignalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AnalyticsServer).LastDangerousSignal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Analytics_LastDangerousSignal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AnalyticsServer).LastDangerousSignal(ctx, req.(*LastDangerousSignalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Analytics_LastDangerousSignalStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(LastDangerousSignalStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AnalyticsServer).LastDangerousSignalStream(m, &grpc.GenericServerStream[LastDangerousSignalStreamRequest, LastDangerousSignalResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Analytics_LastDangerousSignalStreamServer = grpc.ServerStreamingServer[LastDangerousSignalResponse]

// Analytics_ServiceDesc is the grpc.ServiceDesc for Analytics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Analytics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "analytics.Analytics",
	HandlerType: (*AnalyticsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LastDangerousSignal",
			Handler:    _Analytics_LastDangerousSignal_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LastDangerousSignalStream",
			Handler:       _Analytics_LastDangerousSignalStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "analytics.proto",
}
